
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package esercitazione4;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\005\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\002" +
    "\000\002\005\004\000\002\007\007\000\002\007\007\000" +
    "\002\007\007\000\002\007\007\000\002\010\005\000\002" +
    "\010\003\000\002\013\005\000\002\013\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\006\014\000\002" +
    "\014\006\000\002\014\002\000\002\017\007\000\002\017" +
    "\002\000\002\015\005\000\002\015\003\000\002\004\012" +
    "\000\002\020\006\000\002\020\002\000\002\021\007\000" +
    "\002\021\002\000\002\022\003\000\002\022\004\000\002" +
    "\016\004\000\002\016\004\000\002\016\002\000\002\023" +
    "\006\000\002\023\004\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\004\000" +
    "\002\023\004\000\002\025\006\000\002\025\005\000\002" +
    "\024\006\000\002\024\005\000\002\027\011\000\002\034" +
    "\004\000\002\034\002\000\002\032\006\000\002\036\004" +
    "\000\002\036\002\000\002\030\007\000\002\026\004\000" +
    "\002\026\007\000\002\026\002\000\002\033\005\000\002" +
    "\033\006\000\002\033\003\000\002\033\004\000\002\031" +
    "\005\000\002\031\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\005\000\002\035\005\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\004\000\002" +
    "\035\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\302\000\010\004\004\016\013\023\007\001\002\000" +
    "\004\061\161\001\002\000\004\002\260\001\002\000\012" +
    "\002\ufffc\004\004\016\013\023\007\001\002\000\004\061" +
    "\234\001\002\000\012\002\ufffc\004\004\016\013\023\007" +
    "\001\002\000\012\002\ufffc\004\004\016\013\023\007\001" +
    "\002\000\004\023\007\001\002\000\004\061\014\001\002" +
    "\000\004\021\015\001\002\000\006\022\uffe7\061\016\001" +
    "\002\000\004\005\220\001\002\000\004\022\020\001\002" +
    "\000\004\017\021\001\002\000\012\011\025\012\022\013" +
    "\023\014\026\001\002\000\012\005\uffec\007\uffec\010\uffec" +
    "\022\uffec\001\002\000\012\005\uffeb\007\uffeb\010\uffeb\022" +
    "\uffeb\001\002\000\006\005\uffe3\010\216\001\002\000\012" +
    "\005\uffed\007\uffed\010\uffed\022\uffed\001\002\000\012\005" +
    "\uffea\007\uffea\010\uffea\022\uffea\001\002\000\004\005\030" +
    "\001\002\000\024\004\004\015\046\020\uffd9\026\042\027" +
    "\043\031\031\032\040\037\032\061\041\001\002\000\030" +
    "\007\uffc3\021\054\030\132\043\047\056\062\061\061\062" +
    "\053\063\050\064\060\065\052\066\056\001\002\000\024" +
    "\021\054\043\047\056\062\061\061\062\053\063\050\064" +
    "\060\065\052\066\056\001\002\000\004\006\205\001\002" +
    "\000\004\007\204\001\002\000\004\007\203\001\002\000" +
    "\004\007\202\001\002\000\036\004\004\015\046\020\uffd9" +
    "\024\uffd9\026\042\027\043\031\031\032\040\034\uffd9\035" +
    "\uffd9\036\uffd9\037\032\041\uffd9\061\041\001\002\000\024" +
    "\021\054\043\047\056\062\061\061\062\053\063\050\064" +
    "\060\065\052\066\056\001\002\000\010\006\ufff5\010\145" +
    "\021\146\001\002\000\030\007\uffc3\021\054\030\132\043" +
    "\047\056\062\061\061\062\053\063\050\064\060\065\052" +
    "\066\056\001\002\000\030\007\uffc3\021\054\030\132\043" +
    "\047\056\062\061\061\062\053\063\050\064\060\065\052" +
    "\066\056\001\002\000\036\004\004\015\046\020\uffd9\024" +
    "\uffd9\026\042\027\043\031\031\032\040\034\uffd9\035\uffd9" +
    "\036\uffd9\037\032\041\uffd9\061\041\001\002\000\004\020" +
    "\126\001\002\000\024\021\054\043\047\056\062\061\061" +
    "\062\053\063\050\064\060\065\052\066\056\001\002\000" +
    "\024\021\054\043\047\056\062\061\061\062\053\063\050" +
    "\064\060\065\052\066\056\001\002\000\066\007\uffbb\010" +
    "\uffbb\021\uffbb\022\uffbb\030\uffbb\033\uffbb\040\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\061\uffbb" +
    "\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\001\002\000" +
    "\040\007\uffbd\010\123\022\uffbd\042\067\043\064\044\074" +
    "\045\072\046\070\047\075\050\076\051\071\052\073\053" +
    "\066\054\065\055\077\001\002\000\066\007\uffb7\010\uffb7" +
    "\021\uffb7\022\uffb7\030\uffb7\033\uffb7\040\uffb7\042\uffb7\043" +
    "\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7" +
    "\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\061\uffb7\062" +
    "\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\001\002\000\066" +
    "\007\uffb9\010\uffb9\021\uffb9\022\uffb9\030\uffb9\033\uffb9\040" +
    "\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9" +
    "\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056" +
    "\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9" +
    "\001\002\000\024\021\054\043\047\056\062\061\061\062" +
    "\053\063\050\064\060\065\052\066\056\001\002\000\004" +
    "\007\120\001\002\000\066\007\uffb6\010\uffb6\021\uffb6\022" +
    "\uffb6\030\uffb6\033\uffb6\040\uffb6\042\uffb6\043\uffb6\044\uffb6" +
    "\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053" +
    "\uffb6\054\uffb6\055\uffb6\056\uffb6\061\uffb6\062\uffb6\063\uffb6" +
    "\064\uffb6\065\uffb6\066\uffb6\001\002\000\066\007\uffbc\010" +
    "\uffbc\021\uffbc\022\uffbc\030\uffbc\033\uffbc\040\uffbc\042\uffbc" +
    "\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051" +
    "\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\061\uffbc" +
    "\062\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\001\002\000" +
    "\066\007\uffba\010\uffba\021\uffba\022\uffba\030\uffba\033\uffba" +
    "\040\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047" +
    "\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba" +
    "\056\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba\066" +
    "\uffba\001\002\000\066\007\uffb8\010\uffb8\021\114\022\uffb8" +
    "\030\uffb8\033\uffb8\040\uffb8\042\uffb8\043\uffb8\044\uffb8\045" +
    "\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8" +
    "\054\uffb8\055\uffb8\056\uffb8\061\uffb8\062\uffb8\063\uffb8\064" +
    "\uffb8\065\uffb8\066\uffb8\001\002\000\024\021\054\043\047" +
    "\056\062\061\061\062\053\063\050\064\060\065\052\066" +
    "\056\001\002\000\066\007\uffa7\010\uffa7\021\uffa7\022\uffa7" +
    "\030\uffa7\033\uffa7\040\uffa7\042\uffa7\043\uffa7\044\uffa7\045" +
    "\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7" +
    "\054\uffa7\055\uffa7\056\uffa7\061\uffa7\062\uffa7\063\uffa7\064" +
    "\uffa7\065\uffa7\066\uffa7\001\002\000\024\021\054\043\047" +
    "\056\062\061\061\062\053\063\050\064\060\065\052\066" +
    "\056\001\002\000\024\021\054\043\047\056\062\061\061" +
    "\062\053\063\050\064\060\065\052\066\056\001\002\000" +
    "\024\021\054\043\047\056\062\061\061\062\053\063\050" +
    "\064\060\065\052\066\056\001\002\000\024\021\054\043" +
    "\047\056\062\061\061\062\053\063\050\064\060\065\052" +
    "\066\056\001\002\000\024\021\054\043\047\056\062\061" +
    "\061\062\053\063\050\064\060\065\052\066\056\001\002" +
    "\000\024\021\054\043\047\056\062\061\061\062\053\063" +
    "\050\064\060\065\052\066\056\001\002\000\024\021\054" +
    "\043\047\056\062\061\061\062\053\063\050\064\060\065" +
    "\052\066\056\001\002\000\024\021\054\043\047\056\062" +
    "\061\061\062\053\063\050\064\060\065\052\066\056\001" +
    "\002\000\024\021\054\043\047\056\062\061\061\062\053" +
    "\063\050\064\060\065\052\066\056\001\002\000\024\021" +
    "\054\043\047\056\062\061\061\062\053\063\050\064\060" +
    "\065\052\066\056\001\002\000\024\021\054\043\047\056" +
    "\062\061\061\062\053\063\050\064\060\065\052\066\056" +
    "\001\002\000\024\021\054\043\047\056\062\061\061\062" +
    "\053\063\050\064\060\065\052\066\056\001\002\000\066" +
    "\007\uffb0\010\uffb0\021\uffb0\022\uffb0\030\uffb0\033\uffb0\040" +
    "\uffb0\042\067\043\064\044\074\045\072\046\070\047\075" +
    "\050\076\051\071\052\073\053\066\054\065\055\uffb0\056" +
    "\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0\066\uffb0" +
    "\001\002\000\052\007\uffad\010\uffad\021\uffad\022\uffad\030" +
    "\uffad\033\uffad\040\uffad\042\067\043\064\044\074\045\072" +
    "\054\uffad\055\uffad\056\uffad\061\uffad\062\uffad\063\uffad\064" +
    "\uffad\065\uffad\066\uffad\001\002\000\052\007\uffaa\010\uffaa" +
    "\021\uffaa\022\uffaa\030\uffaa\033\uffaa\040\uffaa\042\067\043" +
    "\064\044\074\045\072\054\uffaa\055\uffaa\056\uffaa\061\uffaa" +
    "\062\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa\001\002\000" +
    "\066\007\uffb3\010\uffb3\021\uffb3\022\uffb3\030\uffb3\033\uffb3" +
    "\040\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047" +
    "\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3" +
    "\056\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066" +
    "\uffb3\001\002\000\052\007\uffaf\010\uffaf\021\uffaf\022\uffaf" +
    "\030\uffaf\033\uffaf\040\uffaf\042\067\043\064\044\074\045" +
    "\072\054\uffaf\055\uffaf\056\uffaf\061\uffaf\062\uffaf\063\uffaf" +
    "\064\uffaf\065\uffaf\066\uffaf\001\002\000\066\007\uffb2\010" +
    "\uffb2\021\uffb2\022\uffb2\030\uffb2\033\uffb2\040\uffb2\042\uffb2" +
    "\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051" +
    "\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\061\uffb2" +
    "\062\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\001\002\000" +
    "\052\007\uffac\010\uffac\021\uffac\022\uffac\030\uffac\033\uffac" +
    "\040\uffac\042\067\043\064\044\074\045\072\054\uffac\055" +
    "\uffac\056\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065\uffac" +
    "\066\uffac\001\002\000\052\007\uffab\010\uffab\021\uffab\022" +
    "\uffab\030\uffab\033\uffab\040\uffab\042\067\043\064\044\074" +
    "\045\072\054\uffab\055\uffab\056\uffab\061\uffab\062\uffab\063" +
    "\uffab\064\uffab\065\uffab\066\uffab\001\002\000\066\007\uffb5" +
    "\010\uffb5\021\uffb5\022\uffb5\030\uffb5\033\uffb5\040\uffb5\042" +
    "\uffb5\043\uffb5\044\074\045\072\046\uffb5\047\uffb5\050\uffb5" +
    "\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\061" +
    "\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5\001\002" +
    "\000\052\007\uffae\010\uffae\021\uffae\022\uffae\030\uffae\033" +
    "\uffae\040\uffae\042\067\043\064\044\074\045\072\054\uffae" +
    "\055\uffae\056\uffae\061\uffae\062\uffae\063\uffae\064\uffae\065" +
    "\uffae\066\uffae\001\002\000\066\007\uffb1\010\uffb1\021\uffb1" +
    "\022\uffb1\030\uffb1\033\uffb1\040\uffb1\042\067\043\064\044" +
    "\074\045\072\046\070\047\075\050\076\051\071\052\073" +
    "\053\066\054\uffb1\055\uffb1\056\uffb1\061\uffb1\062\uffb1\063" +
    "\uffb1\064\uffb1\065\uffb1\066\uffb1\001\002\000\066\007\uffb4" +
    "\010\uffb4\021\uffb4\022\uffb4\030\uffb4\033\uffb4\040\uffb4\042" +
    "\uffb4\043\uffb4\044\074\045\072\046\uffb4\047\uffb4\050\uffb4" +
    "\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\061" +
    "\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\001\002" +
    "\000\026\021\054\022\116\043\047\056\062\061\061\062" +
    "\053\063\050\064\060\065\052\066\056\001\002\000\004" +
    "\022\117\001\002\000\066\007\uffcf\010\uffcf\021\uffcf\022" +
    "\uffcf\030\uffcf\033\uffcf\040\uffcf\042\uffcf\043\uffcf\044\uffcf" +
    "\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053" +
    "\uffcf\054\uffcf\055\uffcf\056\uffcf\061\uffcf\062\uffcf\063\uffcf" +
    "\064\uffcf\065\uffcf\066\uffcf\001\002\000\066\007\uffd0\010" +
    "\uffd0\021\uffd0\022\uffd0\030\uffd0\033\uffd0\040\uffd0\042\uffd0" +
    "\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051" +
    "\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\061\uffd0" +
    "\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\001\002\000" +
    "\036\004\uffd6\015\uffd6\020\uffd6\024\uffd6\026\uffd6\027\uffd6" +
    "\031\uffd6\032\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\041" +
    "\uffd6\061\uffd6\001\002\000\034\022\122\042\067\043\064" +
    "\044\074\045\072\046\070\047\075\050\076\051\071\052" +
    "\073\053\066\054\065\055\077\001\002\000\066\007\uffa9" +
    "\010\uffa9\021\uffa9\022\uffa9\030\uffa9\033\uffa9\040\uffa9\042" +
    "\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9" +
    "\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\061" +
    "\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9\001\002" +
    "\000\024\021\054\043\047\056\062\061\061\062\053\063" +
    "\050\064\060\065\052\066\056\001\002\000\006\007\uffbe" +
    "\022\uffbe\001\002\000\066\007\uffa8\010\uffa8\021\uffa8\022" +
    "\uffa8\030\uffa8\033\uffa8\040\uffa8\042\uffa8\043\uffa8\044\074" +
    "\045\072\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053" +
    "\uffa8\054\uffa8\055\uffa8\056\uffa8\061\uffa8\062\uffa8\063\uffa8" +
    "\064\uffa8\065\uffa8\066\uffa8\001\002\000\012\002\uffe9\004" +
    "\uffe9\016\uffe9\023\uffe9\001\002\000\016\020\uffda\024\uffda" +
    "\034\uffda\035\uffda\036\uffda\041\uffda\001\002\000\056\007" +
    "\uffc3\021\054\030\132\042\067\043\140\044\074\045\072" +
    "\046\070\047\075\050\076\051\071\052\073\053\066\054" +
    "\065\055\077\056\062\061\061\062\053\063\050\064\060" +
    "\065\052\066\056\001\002\000\004\007\137\001\002\000" +
    "\004\021\133\001\002\000\024\021\054\043\047\056\062" +
    "\061\061\062\053\063\050\064\060\065\052\066\056\001" +
    "\002\000\034\022\135\042\067\043\064\044\074\045\072" +
    "\046\070\047\075\050\076\051\071\052\073\053\066\054" +
    "\065\055\077\001\002\000\030\007\uffc3\021\054\030\132" +
    "\043\047\056\062\061\061\062\053\063\050\064\060\065" +
    "\052\066\056\001\002\000\004\007\uffc4\001\002\000\036" +
    "\004\uffd4\015\uffd4\020\uffd4\024\uffd4\026\uffd4\027\uffd4\031" +
    "\uffd4\032\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\041\uffd4" +
    "\061\uffd4\001\002\000\024\021\054\043\047\056\062\061" +
    "\061\062\053\063\050\064\060\065\052\066\056\001\002" +
    "\000\004\007\uffc5\001\002\000\056\007\uffb4\021\uffb4\030" +
    "\uffb4\042\uffb4\043\uffb4\044\074\045\072\046\uffb4\047\uffb4" +
    "\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056" +
    "\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4" +
    "\001\002\000\004\007\144\001\002\000\036\004\uffd5\015" +
    "\uffd5\020\uffd5\024\uffd5\026\uffd5\027\uffd5\031\uffd5\032\uffd5" +
    "\034\uffd5\035\uffd5\036\uffd5\037\uffd5\041\uffd5\061\uffd5\001" +
    "\002\000\004\061\161\001\002\000\030\021\054\022\152" +
    "\043\047\056\062\060\151\061\061\062\053\063\050\064" +
    "\060\065\052\066\056\001\002\000\004\022\160\001\002" +
    "\000\036\010\156\022\uffc0\042\067\043\064\044\074\045" +
    "\072\046\070\047\075\050\076\051\071\052\073\053\066" +
    "\054\065\055\077\001\002\000\004\061\153\001\002\000" +
    "\004\007\uffcd\001\002\000\006\010\154\022\uffbf\001\002" +
    "\000\026\021\054\043\047\056\062\060\151\061\061\062" +
    "\053\063\050\064\060\065\052\066\056\001\002\000\004" +
    "\022\uffc1\001\002\000\026\021\054\043\047\056\062\060" +
    "\151\061\061\062\053\063\050\064\060\065\052\066\056" +
    "\001\002\000\004\022\uffc2\001\002\000\004\007\uffce\001" +
    "\002\000\010\005\ufff5\006\ufff5\010\145\001\002\000\006" +
    "\005\ufff6\006\ufff6\001\002\000\034\033\164\042\067\043" +
    "\064\044\074\045\072\046\070\047\075\050\076\051\071" +
    "\052\073\053\066\054\065\055\077\001\002\000\030\004" +
    "\004\015\046\026\042\027\043\031\031\032\040\034\uffd9" +
    "\035\uffd9\036\uffd9\037\032\061\041\001\002\000\010\034" +
    "\uffca\035\uffca\036\167\001\002\000\006\034\175\035\uffc7" +
    "\001\002\000\024\021\054\043\047\056\062\061\061\062" +
    "\053\063\050\064\060\065\052\066\056\001\002\000\010" +
    "\034\uffca\035\uffca\036\167\001\002\000\006\034\uffcb\035" +
    "\uffcb\001\002\000\034\033\173\042\067\043\064\044\074" +
    "\045\072\046\070\047\075\050\076\051\071\052\073\053" +
    "\066\054\065\055\077\001\002\000\030\004\004\015\046" +
    "\026\042\027\043\031\031\032\040\034\uffd9\035\uffd9\036" +
    "\uffd9\037\032\061\041\001\002\000\010\034\uffc9\035\uffc9" +
    "\036\uffc9\001\002\000\024\004\004\015\046\026\042\027" +
    "\043\031\031\032\040\035\uffd9\037\032\061\041\001\002" +
    "\000\004\035\177\001\002\000\004\007\uffcc\001\002\000" +
    "\004\035\uffc8\001\002\000\016\020\uffdb\024\uffdb\034\uffdb" +
    "\035\uffdb\036\uffdb\041\uffdb\001\002\000\036\004\uffd2\015" +
    "\uffd2\020\uffd2\024\uffd2\026\uffd2\027\uffd2\031\uffd2\032\uffd2" +
    "\034\uffd2\035\uffd2\036\uffd2\037\uffd2\041\uffd2\061\uffd2\001" +
    "\002\000\036\004\uffd7\015\uffd7\020\uffd7\024\uffd7\026\uffd7" +
    "\027\uffd7\031\uffd7\032\uffd7\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\041\uffd7\061\uffd7\001\002\000\036\004\uffd1\015\uffd1" +
    "\020\uffd1\024\uffd1\026\uffd1\027\uffd1\031\uffd1\032\uffd1\034" +
    "\uffd1\035\uffd1\036\uffd1\037\uffd1\041\uffd1\061\uffd1\001\002" +
    "\000\024\021\054\043\047\056\062\061\061\062\053\063" +
    "\050\064\060\065\052\066\056\001\002\000\004\007\207" +
    "\001\002\000\036\004\uffd8\015\uffd8\020\uffd8\024\uffd8\026" +
    "\uffd8\027\uffd8\031\uffd8\032\uffd8\034\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\041\uffd8\061\uffd8\001\002\000\034\040\211\042" +
    "\067\043\064\044\074\045\072\046\070\047\075\050\076" +
    "\051\071\052\073\053\066\054\065\055\077\001\002\000" +
    "\024\004\004\015\046\026\042\027\043\031\031\032\040" +
    "\037\032\041\uffd9\061\041\001\002\000\004\041\213\001" +
    "\002\000\004\007\uffc6\001\002\000\004\007\215\001\002" +
    "\000\036\004\uffd3\015\uffd3\020\uffd3\024\uffd3\026\uffd3\027" +
    "\uffd3\031\uffd3\032\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\041\uffd3\061\uffd3\001\002\000\012\011\025\012\022\013" +
    "\023\014\026\001\002\000\004\005\uffe4\001\002\000\012" +
    "\011\025\012\022\013\023\014\026\001\002\000\006\010" +
    "\222\022\uffe5\001\002\000\004\061\224\001\002\000\004" +
    "\022\uffe8\001\002\000\004\005\225\001\002\000\012\011" +
    "\025\012\022\013\023\014\026\001\002\000\006\010\222" +
    "\022\uffe5\001\002\000\004\022\uffe6\001\002\000\012\002" +
    "\ufffc\004\004\016\013\023\007\001\002\000\004\002\001" +
    "\001\002\000\006\002\ufffd\023\ufffd\001\002\000\006\002" +
    "\uffff\023\uffff\001\002\000\004\021\235\001\002\000\010" +
    "\022\uffe0\025\237\061\236\001\002\000\004\005\uffdd\001" +
    "\002\000\004\061\256\001\002\000\004\022\252\001\002" +
    "\000\004\005\242\001\002\000\012\011\025\012\022\013" +
    "\023\014\026\001\002\000\006\010\244\022\uffde\001\002" +
    "\000\006\025\237\061\236\001\002\000\004\022\uffe1\001" +
    "\002\000\004\005\247\001\002\000\012\011\025\012\022" +
    "\013\023\014\026\001\002\000\006\010\244\022\uffde\001" +
    "\002\000\004\022\uffdf\001\002\000\004\005\253\001\002" +
    "\000\024\004\004\015\046\024\uffd9\026\042\027\043\031" +
    "\031\032\040\037\032\061\041\001\002\000\004\024\255" +
    "\001\002\000\012\002\uffe2\004\uffe2\016\uffe2\023\uffe2\001" +
    "\002\000\004\005\uffdc\001\002\000\006\002\ufffe\023\ufffe" +
    "\001\002\000\004\002\000\001\002\000\006\005\263\006" +
    "\264\001\002\000\044\002\ufffb\004\ufffb\015\ufffb\016\ufffb" +
    "\020\ufffb\023\ufffb\024\ufffb\026\ufffb\027\ufffb\031\ufffb\032" +
    "\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\041\ufffb\061\ufffb" +
    "\001\002\000\012\011\025\012\022\013\023\014\026\001" +
    "\002\000\014\062\265\063\271\064\266\065\270\066\272" +
    "\001\002\000\006\007\ufff0\010\ufff0\001\002\000\006\007" +
    "\ufff1\010\ufff1\001\002\000\004\007\276\001\002\000\006" +
    "\007\uffef\010\uffef\001\002\000\006\007\ufff2\010\ufff2\001" +
    "\002\000\006\007\uffee\010\uffee\001\002\000\006\007\ufff3" +
    "\010\274\001\002\000\014\062\265\063\271\064\266\065" +
    "\270\066\272\001\002\000\004\007\ufff4\001\002\000\006" +
    "\057\300\061\161\001\002\000\044\002\ufff9\004\ufff9\015" +
    "\ufff9\016\ufff9\020\ufff9\023\ufff9\024\ufff9\026\ufff9\027\ufff9" +
    "\031\ufff9\032\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\041" +
    "\ufff9\061\ufff9\001\002\000\044\002\ufff7\004\ufff7\015\ufff7" +
    "\016\ufff7\020\ufff7\023\ufff7\024\ufff7\026\ufff7\027\ufff7\031" +
    "\ufff7\032\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\041\ufff7" +
    "\061\ufff7\001\002\000\004\007\302\001\002\000\006\057" +
    "\304\061\161\001\002\000\044\002\ufffa\004\ufffa\015\ufffa" +
    "\016\ufffa\020\ufffa\023\ufffa\024\ufffa\026\ufffa\027\ufffa\031" +
    "\ufffa\032\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\041\ufffa" +
    "\061\ufffa\001\002\000\044\002\ufff8\004\ufff8\015\ufff8\016" +
    "\ufff8\020\ufff8\023\ufff8\024\ufff8\026\ufff8\027\ufff8\031\ufff8" +
    "\032\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\041\ufff8\061" +
    "\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\302\000\014\002\004\003\011\004\010\005\007\006" +
    "\005\001\001\000\006\007\261\010\260\001\001\000\002" +
    "\001\001\000\012\003\256\004\010\005\007\006\005\001" +
    "\001\000\002\001\001\000\012\003\232\004\010\005\007" +
    "\006\005\001\001\000\012\003\231\004\010\005\007\006" +
    "\005\001\001\000\004\004\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\023" +
    "\015\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\005\036\010\032\016\044\023\043\024" +
    "\034\027\035\030\033\001\001\000\010\025\056\026\213" +
    "\035\127\001\001\000\006\025\056\035\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\005\036\010\032\016\200\023\043\024" +
    "\034\027\035\030\033\001\001\000\006\025\056\035\162" +
    "\001\001\000\002\001\001\000\010\025\056\026\142\035" +
    "\127\001\001\000\010\025\056\026\130\035\127\001\001" +
    "\000\020\005\036\010\032\016\126\023\043\024\034\027" +
    "\035\030\033\001\001\000\002\001\001\000\010\025\056" +
    "\031\054\035\050\001\001\000\006\025\056\035\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\056\035\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\056\035\062\001" +
    "\001\000\002\001\001\000\006\025\056\035\112\001\001" +
    "\000\006\025\056\035\111\001\001\000\006\025\056\035" +
    "\110\001\001\000\006\025\056\035\107\001\001\000\006" +
    "\025\056\035\106\001\001\000\006\025\056\035\105\001" +
    "\001\000\006\025\056\035\104\001\001\000\006\025\056" +
    "\035\103\001\001\000\006\025\056\035\102\001\001\000" +
    "\006\025\056\035\101\001\001\000\006\025\056\035\100" +
    "\001\001\000\006\025\056\035\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\025\056\031\114\035" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\025\056\031\123\035\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\025\056\026\140\035\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\056\035\133\001" +
    "\001\000\002\001\001\000\010\025\056\026\135\035\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\025" +
    "\056\035\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\161\001" +
    "\001\000\010\025\056\033\146\035\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\056\033\154\035\147" +
    "\001\001\000\002\001\001\000\010\025\056\033\156\035" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\036\010\032\016\164\023\043\024\034\027\035\030\033" +
    "\001\001\000\006\032\167\034\165\001\001\000\004\036" +
    "\175\001\001\000\006\025\056\035\171\001\001\000\006" +
    "\032\167\034\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\005\036\010\032\016\173\023\043\024\034" +
    "\027\035\030\033\001\001\000\002\001\001\000\020\005" +
    "\036\010\032\016\177\023\043\024\034\027\035\030\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\025\056\031\205\035\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\036\010\032\016\211\023\043\024\034\027" +
    "\035\030\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\023\015" +
    "\216\001\001\000\002\001\001\000\004\011\220\001\001" +
    "\000\004\017\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\225\001\001\000\004" +
    "\017\226\001\001\000\002\001\001\000\012\003\230\004" +
    "\010\005\007\006\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\237\022\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\242\001" +
    "\001\000\004\021\244\001\001\000\004\022\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\247\001" +
    "\001\000\004\021\250\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\005\036\010\032\016\253\023\043\024" +
    "\034\027\035\030\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\300" +
    "\001\001\000\006\012\272\013\266\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\272\013\274\001\001\000\002\001\001\000\006" +
    "\007\276\010\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\302\010\260\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Iter Procedure Iter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Iter ::= VarDecl Iter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Iter ::= Function Iter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Iter ::= Procedure Iter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Iter ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecl ::= VAR Decls 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decls ::= Ids COLON Type SEMI Decls 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decls ::= Ids ASSIGN Consts SEMI Decls 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decls ::= Ids COLON Type SEMI ENDVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Decls ::= Ids ASSIGN Consts SEMI ENDVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Ids ::= ID COMMA Ids 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Ids ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Consts ::= Const COMMA Consts 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Consts",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Consts ::= Const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Consts",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Const ::= REAL_CONST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Const ::= INTEGER_CONST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Const ::= STRING_CONST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Const ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= REAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Type ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Type ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Function ::= FUNCTION ID LPAR FuncParams RPAR TYPERETURN Types COLON Body ENDFUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FuncParams ::= ID COLON Type OtherFuncParams 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncParams",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FuncParams ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncParams",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OtherFuncParams ::= COMMA ID COLON Type OtherFuncParams 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherFuncParams",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OtherFuncParams ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherFuncParams",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Types ::= Type COMMA Types 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Types",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Types ::= Type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Types",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Procedure ::= PROCEDURE ID LPAR ProcParams RPAR COLON Body ENDPROCEDURE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Procedure",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ProcParams ::= ProcParamId COLON Type OtherProcParams 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParams",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ProcParams ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParams",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OtherProcParams ::= COMMA ProcParamId COLON Type OtherProcParams 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherProcParams",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OtherProcParams ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherProcParams",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ProcParamId ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParamId",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ProcParamId ::= OUT ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParamId",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Body ::= VarDecl Body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Body ::= Stat Body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Body ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= Ids ASSIGN Exprs SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= ProcCall SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= RETURN Exprs SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= WRITE IOArgs SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= WRITERETURN IOArgs SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= READ IOArgs SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= IfStat SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= WhileStat SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FunCall ::= ID LPAR Exprs RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FunCall ::= ID LPAR RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ProcCall ::= ID LPAR ProcExprs RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcCall",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ProcCall ::= ID LPAR RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcCall",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IfStat ::= IF Expr THEN Body Elifs Else ENDIF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Elifs ::= Elif Elifs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elifs",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Elifs ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elifs",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Elif ::= ELIF Expr THEN Body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elif",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Else ::= ELSE Body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Else ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // WhileStat ::= WHILE Expr DO Body ENDWHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IOArgs ::= Expr IOArgs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IOArgs ::= DOLLARSIGN LPAR Expr RPAR IOArgs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IOArgs ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ProcExprs ::= Expr COMMA ProcExprs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ProcExprs ::= REF ID COMMA ProcExprs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ProcExprs ::= Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ProcExprs ::= REF ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Exprs ::= Expr COMMA Exprs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Exprs ::= Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= FunCall 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= REAL_CONST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= INTEGER_CONST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= STRING_CONST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr PLUS Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr MINUS Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Expr TIMES Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr DIV Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr AND Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr OR Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr GT Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr GE Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr LT Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr LE Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr EQ Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr NE Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= LPAR Expr RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= MINUS Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= NOT Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
